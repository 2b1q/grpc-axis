import {
  Controller,
  OnModuleInit,
  Logger,
  Get,
  Param,
  UseGuards,
} from '@nestjs/common';
import { Client, ClientGrpc, GrpcMethod } from '@nestjs/microservices';
import { grpcVehicleOptions } from 'src/grpc.client';

import {
  Vehicle,
  Snapshot,
  OperationResult,
  VehicleService,
} from './interfaces/vehicle.xploitation.interface';
import { VehicleExploitationService } from './vehicle-exploitation.service';

import { AuthGuard } from '../shared/auth.guard';
import { AuthorizedUser } from 'src/shared/user.decorator';

// common controller for both HTTP and gRPC (HTTP2) requests
@Controller()
export class VehicleExploitationController implements OnModuleInit {
  // inject VehicleExploitationService dependencies trough constructor
  constructor(private vehicleExploitationService: VehicleExploitationService) {}

  // implement vehicle proto file
  @Client(grpcVehicleOptions)
  private readonly client: ClientGrpc;

  private vehicleService: VehicleService;
  private logger = new Logger('VehicleExploitationController');
  private logData(method, data) {
    this.logger.log(
      `call method: ${method} with data  ${JSON.stringify(data)}`,
    );
  }

  // on module init hook => wires up gRPC servece 'VehicleExploitationService'
  onModuleInit() {
    this.vehicleService = this.client.getService<VehicleService>(
      'VehicleExploitationService',
    );
  }

  @GrpcMethod('VehicleExploitationService')
  @UseGuards(AuthGuard)
  addVehicle(vehicle: Vehicle): any {
    this.logger.log(`User ${JSON.stringify(vehicle.user)} addVehicle`);
    return this.vehicleExploitationService.addVehicle(vehicle);
  }

  @GrpcMethod('VehicleExploitationService')
  @UseGuards(AuthGuard)
  addSnapshot(snapshot: Snapshot): Promise<OperationResult> {
    this.logger.log(`User ${JSON.stringify(snapshot.user)} addSnapshot`);
    return this.vehicleExploitationService.addSnapshot(snapshot);
  }

  @Get('api/snaphots')
  @UseGuards(AuthGuard)
  getSnaphotsId(@AuthorizedUser('uuid') clientUuid: string) {
    this.logData('getSnaphotsId', { clientUuid });
    return this.vehicleExploitationService.getSnaphots();
  }

  @Get('api/snaphot/:id')
  @UseGuards(AuthGuard)
  getSnaphotById(@Param() params) {
    return this.vehicleExploitationService.getSnaphot(params.id);
  }
}
